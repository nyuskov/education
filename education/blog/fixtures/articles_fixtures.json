[{"model": "blog.article", "pk": 14, "fields": {"author": 2, "title": "Лук", "message": "Вот почему-то лук не как картошка, а помидоры привёз Пётр 1 из-за границы."}}, {"model": "blog.article", "pk": 15, "fields": {"author": 2, "title": "Картофель", "message": "Ничего об этом не знаю, да!"}}, {"model": "blog.article", "pk": 16, "fields": {"author": 2, "title": "box-shadow", "message": "The box-shadow property enables you to cast a drop shadow from the frame of almost any element. If a border-radius is specified on the element with a box shadow, the box shadow takes on the same rounded corners. The z-ordering of multiple box shadows is the same as multiple text shadows (the first specified shadow is on top).\r\n\r\nBox-shadow generator is an interactive tool allowing you to generate a box-shadow.\r\n\r\nSyntax\r\ncss\r\nCopy to Clipboard\r\n/* Keyword values */\r\nbox-shadow: none;\r\n\r\n/* A color and two length values */\r\n/* <color> | <length> | <length> */\r\nbox-shadow: red 60px -16px;\r\n\r\n/* Three length values and a color */\r\n/* <length> | <length> | <length> | <color> */\r\nbox-shadow: 10px 5px 5px black;\r\n\r\n/* Four length values and a color */\r\n/* <length> | <length> | <length> | <length> | <color> */\r\nbox-shadow: 2px 2px 2px 1px rgb(0 0 0 / 20%);\r\n\r\n/* inset, length values, and a color */\r\n/* <inset> | <length> | <length> | <color> */\r\nbox-shadow: inset 5em 1em gold;\r\n\r\n/* Any number of shadows, separated by commas */\r\nbox-shadow:\r\n  3px 3px red inset,\r\n  -1em 0 0.4em olive;\r\n\r\n/* Global values */\r\nbox-shadow: inherit;\r\nbox-shadow: initial;\r\nbox-shadow: revert;\r\nbox-shadow: revert-layer;\r\nbox-shadow: unset;\r\nSpecify a single box-shadow using:\r\n\r\nTwo, three, or four <length> values.\r\nIf only two values are given, they are interpreted as <offset-x> and <offset-y> values.\r\nIf a third value is given, it is interpreted as a <blur-radius>.\r\nIf a fourth value is given, it is interpreted as a <spread-radius>.\r\nOptionally, the inset keyword.\r\nOptionally, a <color> value.\r\nTo specify multiple shadows, provide a comma-separated list of shadows.\r\n\r\nValues\r\n<color> Optional\r\nSpecifies color for the shadow. See <color> values for possible keywords and notations. If not specified, the value of the color property defined in the parent element is used.\r\n\r\n<length>\r\nSpecifies the offset length of the shadow. This parameter accepts two, three, or four values. Third and fourth values are optional. They are interpreted as follows:\r\n\r\nIf two values are specified, they are interpreted as <offset-x> (horizontal offset) and <offset-y> (vertical offset) values. Negative <offset-x> value places the shadow to the left of the element. Negative <offset-y> value places the shadow above the element.\r\nIf not specified, the value of 0 is used for the missing length. If both <offset-x> and <offset-y> are set to 0, the shadow is placed behind the element (and may generate a blur effect if <blur-radius> and/or <spread-radius> is set).\r\nIf three values are specified, the third value is interpreted as <blur-radius>. The larger this value, the bigger the blur, so the shadow becomes bigger and lighter. Negative values are not allowed. If not specified, it will be set to 0 (meaning that the shadow's edge will be sharp). The specification does not include an exact algorithm for how the blur radius should be calculated; however, it does elaborate as follows:\r\n…for a long, straight shadow edge, this should create a color transition the length of the blur distance that is perpendicular to and centered on the shadow's edge, and that ranges from the full shadow color at the radius endpoint inside the shadow to fully transparent at the endpoint outside it.\r\n\r\nIf four values are specified, the fourth value is interpreted as <spread-radius>. Positive values will cause the shadow to expand and grow bigger, negative values will cause the shadow to shrink. If not specified, it will be set to 0 (that is, the shadow will be the same size as the element).\r\ninset Optional\r\nChanges the shadow from an outer box-shadow to an inner box-shadow (as if the content is pressed into the box). Inset shadows are drawn inside the box's border (even if the border is transparent), and they appear above the background but below the content. By default, the shadow behaves like a drop shadow, giving the appearance that the box is elevated above its content. This is the default behavior when inset is not specified.\r\n\r\nInterpolation\r\nWhen animating shadows, such as when multiple shadow values on a box transition to new values on hover, the values are interpolated. Interpolation determines intermediate values of properties, such as the blur radius, spread radius, and color, as shadows transition. For each shadow in a list of shadows, the color, x, y, blur, and spread transition; the color as <color>, and the other values as <length>s.\r\n\r\nIn interpolating multiple shadows between two comma-separated lists of multiple box shadows, the shadows are paired, in order, with interpolation occurring between paired shadows. If the lists of shadows have different lengths, then the shorter list is padded at the end with shadows whose color is transparent, and X, Y, and blur are 0, with the inset, or lack of inset, being set to match. If in any pair of shadows, one has inset set and the other does not, the entire shadow list is uninterpolated; the shadows will change to the new values without an animating effect."}}, {"model": "blog.article", "pk": 17, "fields": {"author": 1, "title": "11 проектов на Django", "message": "1. Блог на Django\r\nЕсли вы новичок в Django, то данный проект для вас особенно хорош. Используя Django, можно полностью с нуля создать сайт-блог.\r\n\r\nБлог — это сайт, на котором вы можете публиковать статьи, а также обновлять, редактировать или удалять их. Там будет домашняя страница с названиями всех статей, а для открытия какой-нибудь из них нужно будет кликнуть мышью по названию.\r\n\r\nВы сейчас как раз находитесь на аналогичном сайте и можете создать такой же блог, используя Django. Для этого вам надо знать основы Python и иметь базовые знания по технологиям фронтенда, HTML и CSS.\r\n\r\nПреимущество Django состоит в том, что вам не придется создавать админ-панель для вашего сайта. Для этого у Django есть встроенные функции и вы легко сможете их использовать.\r\n\r\nПодробнее с данным проектом вы можете ознакомиться в статье «How to Create a Blog Using the Django Framework».\r\n\r\n2. To-do приложение на Django\r\nСоздание простого и интересного to-do приложения — это отличный способ изучить новую технологию. To-do — это просто список дел или задач, которые вы планируете выполнить.\r\n\r\nОчень вероятно, что вы это уже знаете и сами пользовались или пользуетесь подобным приложением. Или хотя бы составляли такой список от руки. Теперь вы можете попробовать сами автоматизировать эту задачу при помощи специального приложения.\r\n\r\nС помощью Django вы можете создать полноценное to-do приложение и использовать его для собственных нужд, чтобы не забывать важные дела. Такое приложение пригодится многим людям.\r\n\r\nДля создания подобного приложения вам не нужно быть экспертом в Django. Вполне достаточно будет знать основы работы с этим фреймворком.\r\n\r\nЕсли вас это интересует, то вот подробный гайд по созданию такого приложения.\r\n\r\n3. Клон сайта Hacker News\r\nЕсли у вас нет собственных крутых идей, то хороший способ делать проекты на Django — создавать клоны уже существующих сайтов и приложений. То есть вы можете создать клон любого понравившегося вам сайта.\r\n\r\nТакие проекты помогут вам разобраться во внутренней работе понравившихся вам сайтов и приложений.\r\n\r\nМы нашли хороший туториал по созданию клона сайта Hacker News. Если вам такая мысль интересна, то, следуя инструкциям, вы сможете создать подобный сайт с нуля.\r\n\r\nПосле выполнения данного проекта вы сможете создавать клоны и других сайтов. Делая такие вещи самостоятельно, вы приобретете уверенность и подготовку для более сложных проектов.\r\n\r\n4. Система входа на сайт\r\nЕсли вы Django-разработчик, то должны знать, как создать систему входа на сайт или в приложение. Собственно, каждый backend-разработчик должен знать, как делаются такие вещи, поскольку это используется почти в каждом коммерческом проекте.\r\n\r\nИтак, если вы этого еще не умеете, вам следует этому научиться. Мы нашли видео на YouTube, в котором вас научат, как за 10 минут создать полнофункциональную страницу входа в систему."}}, {"model": "blog.article", "pk": 18, "fields": {"author": 1, "title": "aweewq", "message": "Создать собственный проект — это лучший способ изучить Django или любой другой фреймворк. Проектно-ориентированный подход к обучению вообще значительно лучше простого проглатывания теоретических концепций.\r\n\r\nФреймворки призваны упростить нам жизнь. Но любой фреймворк сначала нужно освоить. Если вы с этим справитесь, дальше все будет идти легко и весело.\r\n\r\nВыполнив несколько реальных проектов с фреймворком, вы получите много опыта и полезных знаний.\r\n\r\nМы провели небольшое исследование и собрали множество идей проектов, которыми поделимся с вами. Предлагая вам идеи, мы рассчитываем, что что вы уже хорошо разбираетесь в основах языка Python и теперь хотите освоить веб-разработку с помощью Django.\r\n\r\nСтоит отметить, что сами по себе идеи ничего не стоят. Любой из вас может провести мозговой штурм и найти много идей на миллион долларов, но все они будут бесполезны, пока вы их не реализуете.\r\n\r\nВ данной статье мы постараемся вам дать не только идеи, но и ресурсы, которые помогут их реализовать."}}, {"model": "blog.article", "pk": 19, "fields": {"author": 1, "title": "agagssda", "message": "fassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssfassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssfassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssfassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssfassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss"}}, {"model": "blog.article", "pk": 20, "fields": {"author": 2, "title": "Pagination.js", "message": "Commonly used\r\ndataSource array | string | object | function\r\ndataSource can be one of the following 4 formats.\r\n\r\nArray\r\n\r\nan array data, eg:\r\n\r\n['1', '2', '3', '4']\r\nObject\r\n\r\nan object that contained the array data, meanwhile, you should specify that array via locator: 'data'.\r\n\r\n{\r\n    data: ['1', '2', '3', '4']\r\n}\r\nFunction\r\n\r\na function that will indicate the array data.\r\n\r\ndataSource: function(done){\r\n    var result = [];\r\n    for(var i = 1; i < 196; i++){\r\n        result.push(i);\r\n    }\r\n    done(result);\r\n}\r\nYou can also send a request to get your data, and then call done to return the array data.\r\n\r\ndataSource: function(done){\r\n    $.ajax({\r\n        type: 'GET',\r\n        url: '/test.json',\r\n        success: function(response){\r\n            done(response);\r\n        }\r\n    });\r\n}\r\nURL\r\n\r\nQuery data items for each paging from a remote server via Ajax.\r\n\r\nUsually you will use it with a locator to specify the location of the array containing data items within the response. The full response of the Ajax request is available as the originalResponse property of the pagination object passed to callback.\r\n\r\n/test.json\r\nFor each pagination request, these two parameters pageNumber pageSize will be appended to the request url. You can customize their names via alias.\r\n\r\n/test.json?pageNumber=2&pageSize=10\r\nlocator string | function (default data)\r\nWhen the data source is not an array type, this option is used to indicate the position of the array in the data source.\r\n\r\nUsing as a string:\r\n\r\nlocator: 'data':\r\n\r\n{\r\n    data: ['1', '2', '3', '4']\r\n}\r\nlocator uses to-function, so you can use dot notation to traverse the result array, such as locator: 'a.b':\r\n\r\n{\r\n    a: {b: ['1', '2', '3', '4']}\r\n}\r\nUsing as a function:\r\n\r\nProvides a custom function to find the position of the array data.\r\n\r\nlocator: function() {\r\n    // find data and return\r\n    return 'a.b';\r\n}\r\nThe data got via Ajax also follow this rule.\r\n\r\ntotalNumber number (default 0)\r\nWhen the dataSource is an URL, you should pass a totalNumber to specify the total number of data items (or via totalNumberLocator). OtherWise, it will not take effect as total number will be calculated automatically.\r\n\r\ntotalNumberLocator function(response)\r\nUseful when the dataSource is an URL, and you expect specifies one of the field value in the request's response as the totalNumber.\r\n\r\nNote: Pagination will ignore totalNumber option when totalNumberLocator specified.\r\n\r\nSee demo\r\n\r\npageNumber number (default 1)\r\nDefault page number at initialization.\r\n\r\npageSize number (default 10)\r\nNumber of data items per page.\r\n\r\npageRange number (default 2)\r\npageRange defines a range of pages that should be display around current page. For example, if current page number is 6 and pageRange is set to 2, then pagination bar will be displayed as like this '1 ... 4 567 8 ... 11 12'.\r\n\r\nIf you want to show all pages, just set it to null.\r\n\r\ncallback function(data, pagination)\r\nUsed to customize item's innerHTML, will be invoked on each paging.\r\n\r\nTo make it easier to maintain, you'd better to use templating engine such as Handlebars and Undercore.template.\r\n\r\nit takes the resulting data and page number and pageSize as its arguments:\r\n\r\ncallback: function(data, pagination){ ... }\r\nParameter\tType\tDescription\r\ndata\tarray\titem data of current page\r\npagination\tobject\tpagination data\r\npagination object contains the following props:\r\n\r\nProperty\tType\tDescription\r\npageNumber\tnumber\tCurrent page number\r\npageRange\tnumber\tCurrent page range\r\npageSize\tnumber\tNumber of data items per page\r\ntotalPage\tnumber\tTotal page\r\ntotalNumber\tnumber\tTotal number of data items\r\nel\tjQuery object\tPagination container element\r\ndirection\tnumber\tPagination direction, -1 means forward, 1 means backward, 0 means current is at initialization.\r\noriginalResponse\tobject\tOriginal response of the request sent by $.ajax() when the dataSource is an URL.\r\nalias object\r\nUsed to customize the name of pageNumber and pageSize when querying data items of the current page from remote server via Ajax."}}, {"model": "blog.article", "pk": 21, "fields": {"author": 1, "title": "aaaaaaaaaaaaa", "message": "ggggggggggggggggggggg"}}, {"model": "blog.article", "pk": 23, "fields": {"author": 2, "title": "ш", "message": "ъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъ"}}, {"model": "blog.article", "pk": 24, "fields": {"author": 2, "title": "ёёёёёёёёёё", "message": "ццццццццццццццццццццццццццццццццццц"}}, {"model": "blog.article", "pk": 25, "fields": {"author": 2, "title": "ёёёё", "message": "жжжжжжжжжжжжжжжжж"}}, {"model": "blog.article", "pk": 26, "fields": {"author": 2, "title": "Kuxnya", "message": "fasfasf"}}, {"model": "blog.article", "pk": 27, "fields": {"author": 2, "title": "Lost", "message": "fsafasf"}}, {"model": "blog.article", "pk": 28, "fields": {"author": 2, "title": "Lost", "message": "aggsg"}}, {"model": "blog.article", "pk": 29, "fields": {"author": 2, "title": "Lost", "message": "gagsg"}}, {"model": "blog.article", "pk": 30, "fields": {"author": 2, "title": "Lost", "message": "gagsg"}}, {"model": "blog.article", "pk": 31, "fields": {"author": 2, "title": "Lisk", "message": "fasfsfa"}}, {"model": "blog.article", "pk": 32, "fields": {"author": 2, "title": "Opa", "message": "asffa"}}, {"model": "blog.article", "pk": 33, "fields": {"author": 2, "title": "Lis", "message": "fasfs"}}, {"model": "blog.article", "pk": 35, "fields": {"author": 2, "title": "Asd", "message": "ASdsad"}}, {"model": "blog.article", "pk": 36, "fields": {"author": 2, "title": "Lasdds", "message": "fsafa"}}, {"model": "blog.article", "pk": 37, "fields": {"author": 2, "title": "Pot", "message": "fasff"}}, {"model": "blog.article", "pk": 38, "fields": {"author": 2, "title": "EEE", "message": "o"}}, {"model": "blog.article", "pk": 39, "fields": {"author": 2, "title": "rr", "message": "CCCCCCCCCCCCCCCC"}}, {"model": "blog.article", "pk": 40, "fields": {"author": 2, "title": "ll", "message": "sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss"}}, {"model": "blog.article", "pk": 41, "fields": {"author": 2, "title": "iiiiiiiiii", "message": "uuuuuuuuu"}}, {"model": "blog.article", "pk": 42, "fields": {"author": 2, "title": "WVFNsG", "message": "jFRsqQTxSWGxnMQJfqXViqHcjtMgifCZdrrGmHkmQLXyVoqHDmCcdBlhhaTNpbNIREtAKG"}}, {"model": "blog.article", "pk": 43, "fields": {"author": 2, "title": "qdPmXU", "message": "ffZCuVsbQneocRXjilcaHBtIcwGjawIhmqoPHicBiyXAcubPNQdCXwYWuPNPdvDQzjQtMzYwCOJAsKVeFFnIJppOtLOXHU"}}, {"model": "blog.article", "pk": 44, "fields": {"author": 2, "title": "pnodlpmwry", "message": "mjyOiZiPbJdnpysYqayNliAjxjdtCNOssyrgWZtPisdsOK"}}]